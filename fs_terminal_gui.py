import sys
import os
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout,
                               QHBoxLayout, QTreeView, QTextEdit, QLineEdit,
                               QPushButton, QLabel, QFileSystemModel,
                               QSplitter, QMessageBox, QMenu, QDialog,
                               QDialogButtonBox, QFormLayout, QListWidget,
                               QInputDialog)
from PySide6.QtGui import QAction, QFont, QIcon
from PySide6.QtCore import Qt, QDir, QItemSelectionModel


class RenameDialog(QDialog):
    def __init__(self, current_name, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å")
        self.setModal(True)
        self.resize(300, 100)

        layout = QFormLayout(self)

        self.old_name_label = QLabel(current_name)
        self.new_name_input = QLineEdit(current_name)

        layout.addRow("–¢–µ–∫—É—â–µ–µ –∏–º—è:", self.old_name_label)
        layout.addRow("–ù–æ–≤–æ–µ –∏–º—è:", self.new_name_input)

        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)

        layout.addRow(buttons)

    def get_new_name(self):
        return self.new_name_input.text().strip()


class GroupRenameDialog(QDialog):
    def __init__(self, file_count, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ì—Ä—É–ø–ø–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
        self.setModal(True)
        self.resize(400, 150)

        layout = QFormLayout(self)

        self.file_count_label = QLabel(f"–ë—É–¥–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {file_count}")
        self.new_name_input = QLineEdit()
        self.new_name_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –±–∞–∑–æ–≤–æ–µ –∏–º—è")

        layout.addRow(self.file_count_label)
        layout.addRow("–ë–∞–∑–æ–≤–æ–µ –∏–º—è:", self.new_name_input)

        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)

        layout.addRow(buttons)

    def get_new_name(self):
        return self.new_name_input.text().strip()


class FileManagerApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")
        self.resize(1000, 700)

        # –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ main
        self.root_path = os.path.join(os.getcwd(), "main")
        os.makedirs(self.root_path, exist_ok=True)
        self.current_path = self.root_path

        self.setup_ui()
        self.setup_file_system()

    def setup_ui(self):
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)

        # –ü–∞–Ω–µ–ª—å –ø—É—Ç–∏
        path_layout = QHBoxLayout()
        self.path_label = QLabel(f"–¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {self.get_relative_path()}")
        self.path_label.setFont(QFont("Arial", 10))

        self.up_button = QPushButton("–ù–∞–≤–µ—Ä—Ö")
        self.up_button.clicked.connect(self.go_up)
        self.up_button.setFixedWidth(80)

        self.refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        self.refresh_button.clicked.connect(self.refresh_view)
        self.refresh_button.setFixedWidth(80)

        path_layout.addWidget(self.path_label)
        path_layout.addStretch()
        path_layout.addWidget(self.up_button)
        path_layout.addWidget(self.refresh_button)

        main_layout.addLayout(path_layout)

        # Splitter –¥–ª—è –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        splitter = QSplitter(Qt.Horizontal)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)

        left_layout.addWidget(QLabel("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫:"))

        self.tree_view = QTreeView()
        self.tree_view.setFont(QFont("Consolas", 10))
        self.tree_view.doubleClicked.connect(self.on_item_double_clicked)
        self.tree_view.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tree_view.customContextMenuRequested.connect(self.show_context_menu)

        # –í–∫–ª—é—á–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Shift
        self.tree_view.setSelectionMode(QTreeView.ExtendedSelection)

        left_layout.addWidget(self.tree_view)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)

        right_layout.addWidget(QLabel("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–µ:"))

        self.info_text = QTextEdit()
        self.info_text.setFont(QFont("Consolas", 10))
        self.info_text.setReadOnly(True)

        right_layout.addWidget(self.info_text)

        # –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        command_layout = QHBoxLayout()
        command_layout.addWidget(QLabel("–ö–æ–º–∞–Ω–¥–∞:"))

        self.command_input = QLineEdit()
        self.command_input.setFont(QFont("Consolas", 10))
        self.command_input.returnPressed.connect(self.execute_command)

        self.execute_button = QPushButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å")
        self.execute_button.clicked.connect(self.execute_command)
        self.execute_button.setFixedWidth(100)

        command_layout.addWidget(self.command_input)
        command_layout.addWidget(self.execute_button)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤ splitter
        splitter.addWidget(left_widget)
        splitter.addWidget(right_widget)
        splitter.setSizes([400, 600])

        main_layout.addWidget(splitter)
        main_layout.addLayout(command_layout)

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        self.create_menu()

    def create_menu(self):
        menubar = self.menuBar()

        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = menubar.addMenu("–§–∞–π–ª")

        new_folder_action = QAction("–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", self)
        new_folder_action.triggered.connect(self.create_new_folder)
        file_menu.addAction(new_folder_action)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        group_rename_action = QAction("–ì—Ä—É–ø–ø–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", self)
        group_rename_action.triggered.connect(self.group_rename_selected)
        file_menu.addAction(group_rename_action)

        file_menu.addSeparator()

        refresh_action = QAction("–û–±–Ω–æ–≤–∏—Ç—å", self)
        refresh_action.triggered.connect(self.refresh_view)
        file_menu.addAction(refresh_action)

        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        # –ú–µ–Ω—é –ü–æ–º–æ—â—å
        help_menu = menubar.addMenu("–ü–æ–º–æ—â—å")

        help_action = QAction("–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º", self)
        help_action.triggered.connect(self.show_help)
        help_menu.addAction(help_action)

    def setup_file_system(self):
        # –ú–æ–¥–µ–ª—å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        self.model = QFileSystemModel()
        self.model.setRootPath(self.root_path)
        self.model.setNameFilters([])  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã
        self.model.setNameFilterDisables(False)

        self.tree_view.setModel(self.model)
        self.tree_view.setRootIndex(self.model.index(self.root_path))

        # –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Ä–∞–∑–º–µ—Ä–∞, —Ç–∏–ø–∞ –∏ –¥–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
        self.tree_view.hideColumn(1)  # –†–∞–∑–º–µ—Ä
        self.tree_view.hideColumn(2)  # –¢–∏–ø
        self.tree_view.hideColumn(3)  # –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è

        self.update_info()

    def get_relative_path(self):
        rel_path = os.path.relpath(self.current_path, start=self.root_path)
        return rel_path if rel_path != "." else "main"

    def update_info(self):
        self.path_label.setText(f"–¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {self.get_relative_path()}")
        self.show_dir_info()

    def show_dir_info(self):
        rel = self.get_relative_path()
        info_text = f"üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {rel}\n\n"

        try:
            entries = os.listdir(self.current_path)
            if not entries:
                info_text += " (–ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞)"
            else:
                dirs = [e for e in entries if os.path.isdir(os.path.join(self.current_path, e))]
                files = [e for e in entries if os.path.isfile(os.path.join(self.current_path, e))]

                info_text += "üìÅ –ü–∞–ø–∫–∏:\n"
                for d in dirs:
                    info_text += f"  üìÇ {d}\n"

                info_text += "\nüìÑ –§–∞–π–ª—ã:\n"
                for f in files:
                    ext = os.path.splitext(f)[1] or "(–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)"
                    info_text += f"  üìÑ {f} ‚Äî {ext}\n"

        except PermissionError:
            info_text += "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–ø–∫–µ"

        self.info_text.setText(info_text)

    def go_up(self):
        parent = os.path.dirname(self.current_path)
        if os.path.commonpath([parent, self.root_path]) != self.root_path:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–ª—å–∑—è –ø–æ–¥–Ω—è—Ç—å—Å—è –≤—ã—à–µ 'main'.")
        elif parent == self.current_path:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã —É–∂–µ –≤ –∫–æ—Ä–Ω–µ –¥–µ—Ä–µ–≤–∞.")
        else:
            self.current_path = parent
            self.tree_view.setRootIndex(self.model.index(self.current_path))
            self.update_info()

    def on_item_double_clicked(self, index):
        path = self.model.filePath(index)
        if os.path.isdir(path):
            self.current_path = path
            self.tree_view.setRootIndex(index)
            self.update_info()

    def show_context_menu(self, position):
        index = self.tree_view.indexAt(position)
        if not index.isValid():
            return

        path = self.model.filePath(index)
        menu = QMenu(self)

        if os.path.isdir(path):
            rename_action = QAction("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", self)
            rename_action.triggered.connect(lambda: self.rename_item(path))
            menu.addAction(rename_action)

            open_action = QAction("–û—Ç–∫—Ä—ã—Ç—å", self)
            open_action.triggered.connect(lambda: self.open_directory(path))
            menu.addAction(open_action)
        else:
            rename_action = QAction("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª", self)
            rename_action.triggered.connect(lambda: self.rename_item(path))
            menu.addAction(rename_action)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        selected_indexes = self.tree_view.selectionModel().selectedIndexes()
        if len(selected_indexes) > 1:
            group_rename_action = QAction("–ì—Ä—É–ø–ø–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö", self)
            group_rename_action.triggered.connect(self.group_rename_selected)
            menu.addAction(group_rename_action)

        menu.exec_(self.tree_view.viewport().mapToGlobal(position))

    def rename_item(self, path):
        current_name = os.path.basename(path)
        dialog = RenameDialog(current_name, self)
        if dialog.exec_() == QDialog.Accepted:
            new_name = dialog.get_new_name()
            if new_name and new_name != current_name:
                try:
                    new_path = os.path.join(os.path.dirname(path), new_name)
                    os.rename(path, new_path)
                    self.refresh_view()
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤: {new_name}")
                except Exception as e:
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å: {e}")

    def group_rename_selected(self):
        """–ì—Ä—É–ø–ø–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        selected_indexes = self.tree_view.selectionModel().selectedIndexes()

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã (–Ω–µ –ø–∞–ø–∫–∏) –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        file_paths = []
        for index in selected_indexes:
            if index.column() == 0:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–∏–º—è)
                path = self.model.filePath(index)
                if os.path.isfile(path):
                    file_paths.append(path)

        if not file_paths:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        file_paths.sort()

        dialog = GroupRenameDialog(len(file_paths), self)
        if dialog.exec_() == QDialog.Accepted:
            new_base_name = dialog.get_new_name()
            if not new_base_name:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤–æ–µ –∏–º—è.")
                return

            self.perform_group_rename(file_paths, new_base_name)

    def perform_group_rename(self, file_paths, new_base_name):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        success_count = 0
        warning_messages = []

        for i, old_path in enumerate(file_paths, 1):
            if not os.path.exists(old_path):
                warning_messages.append(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.basename(old_path)}")
                continue

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            _, ext = os.path.splitext(old_path)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è: –±–∞–∑–æ–≤–æ–µ_–∏–º—è_–Ω–æ–º–µ—Ä.—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            new_name = f"{new_base_name}_{i}{ext}"
            new_path = os.path.join(os.path.dirname(old_path), new_name)

            try:
                os.rename(old_path, new_path)
                success_count += 1
            except Exception as e:
                warning_messages.append(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è {os.path.basename(old_path)}: {e}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_message = f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {success_count} —Ñ–∞–π–ª–æ–≤"
        if warning_messages:
            result_message += f"\n\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n" + "\n".join(warning_messages)

        QMessageBox.information(self, "–†–µ–∑—É–ª—å—Ç–∞—Ç", result_message)
        self.refresh_view()

    def open_directory(self, path):
        self.current_path = path
        self.tree_view.setRootIndex(self.model.index(path))
        self.update_info()

    def create_new_folder(self):
        name, ok = QInputDialog.getText(self, "–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏:")
        if ok and name:
            try:
                new_folder_path = os.path.join(self.current_path, name)
                os.makedirs(new_folder_path, exist_ok=True)
                self.refresh_view()
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ü–∞–ø–∫–∞ '{name}' —Å–æ–∑–¥–∞–Ω–∞")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {e}")

    def refresh_view(self):
        self.model.setRootPath(self.root_path)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å
        self.tree_view.setRootIndex(self.model.index(self.current_path))
        self.update_info()

    def execute_command(self):
        command = self.command_input.text().strip()
        if not command:
            return

        self.command_input.clear()
        self.info_text.append(f"> {command}")

        parts = command.split()
        cmd = parts[0].lower() if parts else ""

        try:
            if cmd == "–≤—ã—Ö–æ–¥":
                self.close()

            elif cmd == "–Ω–¥":
                self.go_up()

            elif cmd == "–≤–¥":
                if len(parts) < 2:
                    self.info_text.append("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏.")
                    return

                target = os.path.join(self.current_path, parts[1])
                if os.path.isdir(target):
                    self.current_path = target
                    self.tree_view.setRootIndex(self.model.index(self.current_path))
                    self.update_info()
                else:
                    self.info_text.append("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            elif cmd == "–∏–º—è":
                if len(parts) < 3:
                    self.info_text.append("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∏–º—è <—Å—Ç–∞—Ä–æ–µ> <–Ω–æ–≤–æ–µ>")
                    return

                old_name = os.path.join(self.current_path, parts[1])
                new_name_full = ' '.join(parts[2:])
                new_name = os.path.join(self.current_path, new_name_full)

                if not os.path.exists(old_name):
                    self.info_text.append("‚ùå –§–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    return

                os.rename(old_name, new_name)
                self.info_text.append(f"‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {parts[1]} ‚Üí {new_name_full}")
                self.refresh_view()

            elif cmd == "–∏–º—è–≥—Ä":
                if len(parts) < 3:
                    self.info_text.append("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∏–º—è–≥—Ä <–Ω–æ–≤–æ–µ> <–∏–º—è1> <–∏–º—è2> <–∏–º—è3> ...")
                    return

                new_base_name = parts[1]
                file_names = parts[2:]

                self.execute_group_rename_command(new_base_name, file_names)

            elif cmd == "–∏–Ω—Ñ–æ":
                self.show_dir_info()

            elif cmd == "–ø–æ–º–æ—â—å":
                self.show_help()

            else:
                self.info_text.append("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
                self.show_help()

        except Exception as e:
            self.info_text.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    def execute_group_rename_command(self, new_base_name, file_names):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        success_count = 0
        warning_messages = []

        for i, file_name in enumerate(file_names, 1):
            old_path = os.path.join(self.current_path, file_name)

            if not os.path.exists(old_path):
                warning_messages.append(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_name}")
                continue

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            _, ext = os.path.splitext(old_path)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è: –±–∞–∑–æ–≤–æ–µ_–∏–º—è_–Ω–æ–º–µ—Ä.—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            new_name = f"{new_base_name}_{i}{ext}"
            new_path = os.path.join(self.current_path, new_name)

            try:
                os.rename(old_path, new_path)
                success_count += 1
                self.info_text.append(f"‚úÖ {file_name} ‚Üí {new_name}")
            except Exception as e:
                warning_messages.append(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è {file_name}: {e}")

        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        for warning in warning_messages:
            self.info_text.append(f"‚ö†Ô∏è {warning}")

        if success_count > 0:
            self.info_text.append(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {success_count} —Ñ–∞–π–ª–æ–≤")

        self.refresh_view()

    def show_help(self):
        help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

  –ù–¥ - –ø–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö
  –í–¥ <–ø–∞–ø–∫–∞> - –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–¥–ø–∞–ø–∫—É
  –∏–º—è <—Å—Ç–∞—Ä–æ–µ> <–Ω–æ–≤–æ–µ> - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É
  –∏–º—è–≥—Ä <–Ω–æ–≤–æ–µ> <–∏–º—è1> <–∏–º—è2> ... - –≥—Ä—É–ø–ø–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
  –∏–Ω—Ñ–æ - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
  –ø–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  –≤—ã—Ö–æ–¥ - –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É

üí° –°–æ–≤–µ—Ç—ã:
- –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –ø–∞–ø–∫–µ –≤ –¥–µ—Ä–µ–≤–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –µ—ë
- –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–≤–µ—Ä—Ö' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É
- –î–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤—ã–¥–µ–ª–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é Shift/Ctrl
"""
        self.info_text.setText(help_text)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle('Fusion')  # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å

    window = FileManagerApp()
    window.show()

    sys.exit(app.exec())